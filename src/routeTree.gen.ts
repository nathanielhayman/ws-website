/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ErrorRouteImport } from './routes/error'
import { Route as MainRouteImport } from './routes/_main'
import { Route as MainIndexRouteImport } from './routes/_main/index'
import { Route as MainTeamRouteImport } from './routes/_main/team'
import { Route as MainSubscribeRouteImport } from './routes/_main/subscribe'
import { Route as MainNot_readyRouteImport } from './routes/_main/not_ready'
import { Route as MainContactRouteImport } from './routes/_main/contact'
import { Route as MainApplyRouteImport } from './routes/_main/apply'

const ErrorRoute = ErrorRouteImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const MainIndexRoute = MainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any)
const MainTeamRoute = MainTeamRouteImport.update({
  id: '/team',
  path: '/team',
  getParentRoute: () => MainRoute,
} as any)
const MainSubscribeRoute = MainSubscribeRouteImport.update({
  id: '/subscribe',
  path: '/subscribe',
  getParentRoute: () => MainRoute,
} as any)
const MainNot_readyRoute = MainNot_readyRouteImport.update({
  id: '/not_ready',
  path: '/not_ready',
  getParentRoute: () => MainRoute,
} as any)
const MainContactRoute = MainContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => MainRoute,
} as any)
const MainApplyRoute = MainApplyRouteImport.update({
  id: '/apply',
  path: '/apply',
  getParentRoute: () => MainRoute,
} as any)

export interface FileRoutesByFullPath {
  '/error': typeof ErrorRoute
  '/apply': typeof MainApplyRoute
  '/contact': typeof MainContactRoute
  '/not_ready': typeof MainNot_readyRoute
  '/subscribe': typeof MainSubscribeRoute
  '/team': typeof MainTeamRoute
  '/': typeof MainIndexRoute
}
export interface FileRoutesByTo {
  '/error': typeof ErrorRoute
  '/apply': typeof MainApplyRoute
  '/contact': typeof MainContactRoute
  '/not_ready': typeof MainNot_readyRoute
  '/subscribe': typeof MainSubscribeRoute
  '/team': typeof MainTeamRoute
  '/': typeof MainIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_main': typeof MainRouteWithChildren
  '/error': typeof ErrorRoute
  '/_main/apply': typeof MainApplyRoute
  '/_main/contact': typeof MainContactRoute
  '/_main/not_ready': typeof MainNot_readyRoute
  '/_main/subscribe': typeof MainSubscribeRoute
  '/_main/team': typeof MainTeamRoute
  '/_main/': typeof MainIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/error'
    | '/apply'
    | '/contact'
    | '/not_ready'
    | '/subscribe'
    | '/team'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/error'
    | '/apply'
    | '/contact'
    | '/not_ready'
    | '/subscribe'
    | '/team'
    | '/'
  id:
    | '__root__'
    | '/_main'
    | '/error'
    | '/_main/apply'
    | '/_main/contact'
    | '/_main/not_ready'
    | '/_main/subscribe'
    | '/_main/team'
    | '/_main/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MainRoute: typeof MainRouteWithChildren
  ErrorRoute: typeof ErrorRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/error': {
      id: '/error'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/team': {
      id: '/_main/team'
      path: '/team'
      fullPath: '/team'
      preLoaderRoute: typeof MainTeamRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/subscribe': {
      id: '/_main/subscribe'
      path: '/subscribe'
      fullPath: '/subscribe'
      preLoaderRoute: typeof MainSubscribeRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/not_ready': {
      id: '/_main/not_ready'
      path: '/not_ready'
      fullPath: '/not_ready'
      preLoaderRoute: typeof MainNot_readyRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/contact': {
      id: '/_main/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof MainContactRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/apply': {
      id: '/_main/apply'
      path: '/apply'
      fullPath: '/apply'
      preLoaderRoute: typeof MainApplyRouteImport
      parentRoute: typeof MainRoute
    }
  }
}

interface MainRouteChildren {
  MainApplyRoute: typeof MainApplyRoute
  MainContactRoute: typeof MainContactRoute
  MainNot_readyRoute: typeof MainNot_readyRoute
  MainSubscribeRoute: typeof MainSubscribeRoute
  MainTeamRoute: typeof MainTeamRoute
  MainIndexRoute: typeof MainIndexRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainApplyRoute: MainApplyRoute,
  MainContactRoute: MainContactRoute,
  MainNot_readyRoute: MainNot_readyRoute,
  MainSubscribeRoute: MainSubscribeRoute,
  MainTeamRoute: MainTeamRoute,
  MainIndexRoute: MainIndexRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRouteWithChildren,
  ErrorRoute: ErrorRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
